<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="language" content="en">
    <title>Cool frontend tricks I learned while making my own writing tool</title>
    <meta name="description" content="this-month-I-learned meets Lesetipps meets Notizblock fÃ¼r Januar 2020">
    <meta name="date" content="2020-05-23">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/assets/styles.css"/>
    <link href="/" rel="home start" />

    <link href="/feed/atom" type="application/atom+xml" rel="alternate" title="Atom Feed" />
    <link href="/feed/json" type="application/json" rel="alternate" title="JSON Feed" />
    <link href="/feed/rss" type="application/rss+xml" rel="alternate" title="RSS Feed" />

    <meta property="og:title" content="Cool frontend tricks I learned while making my own writing tool" />
    <meta property="og:url" content="https://blog.thomaspuppe.de/cool-frontend-tricks-learned-while-making-a-writing-tool" />
    <meta property="og:type" content="article" />
    <meta property="og:article:published_time" content="2020-05-23" />
    <meta property="og:article:author" content="Thomas Puppe" />
</head>
<body>
    <header>
        <p><a href="https://blog.thomaspuppe.de/" rel="home start">Blog von Thomas Puppe, Web Developer.</a></p>
    </header>
    <article class="post">

        <div class="post__meta">
            <span class="post__category">#Webentwicklung</span>
            <time datetime="2020-05-23">23. May 2020</time>
        </div>

        <h1 class="post__title">Cool frontend tricks I learned while making my own writing tool</h1>

        <h2 id="contenteditable-attribute">contentEditable attribute</h2>
<h2 id="ch-attribute-on-container-widths">ch attribute on container widths</h2>
<p>max-width: 70ch;</p>
<h2 id="prevent-certain-symbols-from-being-typed">prevent certain symbols from being typed</h2>
<p><code>&lt;input type=&quot;text&quot; onkeydown=&quot;return event.keyCode!==46;&quot;&gt;</code></p>
<h2 id="always-wrap-localstorage-into-trycatch">Always wrap localStorage into try/catch</h2>
<h2 id="elementclasslisttoggle-parameter-and-return-value">element.classList.toggle() parameter and return value</h2>
<p><code>element.classList.toggle()</code> returns a boolean value, telling you if the class was added or removed. I used this to store the result directly into localstorage (or a variable). No value-checking needed.</p>
<pre><code>document.querySelector(&#39;#darkmode&#39;).addEventListener(&#39;click&#39;, function(evt) {
    window.localStorage.setItem(&#39;wryte_darkmode&#39;, document.body.classList.toggle(&#39;dark&#39;));
});
</code></pre>
<p><code>element.classList.toggle()</code> accepts a second parameter, where you can command if the value shoud be set or removed. This is a shortcut to &quot;check a boolean, and then do add or remove&quot;.</p>
<pre><code>document.querySelector(&#39;#darkmode&#39;).addEventListener(&#39;click&#39;, function(evt) {
    document.body.classList.toggle(&#39;dark&#39;, window.localStorage.getItem(&#39;wryte_darkmode&#39;)===&#39;true&#39;);
});
</code></pre>
<h2 id="caret-color">caret-color</h2>
<p>You can style the color of the caret inside form inputs and contentEditables. <code>caret-color: pink;</code></p>
<h2 id="css-vars-with-classes-and-native-dark-mode">CSS Vars with classes and native dark mode</h2>
<h2 id="fullscreen">fullscreen</h2>
<ul>
<li>on the whole document or even specific elements! (testen)</li>
</ul>
<p>function toggleFullScreen() {
  if (!document.fullscreenElement) {
    document.documentElement.requestFullscreen();
  } else {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    }
  }
}</p>
<p>A shorthand version of this:</p>
<p>document.querySelector(&#39;#fullscreenToggle&#39;).addEventListener(&#39;click&#39;, function(evt) {
    document.fullscreenElement ? document.exitFullscreen() : document.documentElement.requestFullscreen();
});</p>


    </article>
</body>
</html>
