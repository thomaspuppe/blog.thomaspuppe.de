<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8" />
  <title>Coole Browser APIs und CSS Media Queries</title>
  <link media="all" href="/styles.css" rel="stylesheet" />
  <link href="/favicon.ico" rel="shortcut icon" />
    <link href="/sitemap.xml" type="application/xml" rel="sitemap" title="Sitemap">
  <link href="/" rel="home start" />
  <link href="/feed/atom/" type="application/atom+xml" rel="alternate" title="Atom Feed" />
  <link href="/feed/rss/" type="application/rss+xml" rel="alternate" title="RSS Feed" />
    <meta name="description" content="None" />
    <meta name="keywords" content="Webentwicklung" />
</head>
<body>
  <header>
		<p><a href="/" rel="home start">Blog von Thomas Puppe, Web Developer.</a></p>
  	

  </header><article class="post">

	<div class="post__meta">
		<span class="post__category">#Webentwicklung
		</span>
		<time datetime="2017-04-06">
			
			06. April 2017
		</time>
	</div>

    <h1 class="post__title">Coole Browser APIs und CSS Media Queries</h1>

    <p>Kürzlich sah ich in einer in&shy;ter&shy;es&shy;san&shy;ten <a href="https://speakerdeck.com/grigs/why-you-should-build-a-progressive-web-app-now-1">Prä&shy;sen&shy;ta&shy;ti&shy;on über Pro&shy;gres&shy;si&shy;ve Web Apps</a> dies:</p>
<p>@media (display-mode: standalone), (display-mode: fillscreen) {
    .backButton {
        display: block;
    }
}</p>
<p>(1) Browser APIs</p>
<h2>navigator.share()</h2>
<p>https://developers.google.com/web/updates/2016/10/navigator-share</p>
<p>Mit disem Button kann man per JS auslösen, was sonst aus dem Menü getriggert wird. Der Vorteil gegenüber in&shy;di&shy;vi&shy;du&shy;el&shy;len Sharing-Buttons: die Leute bekommen genau die Dienste angeboten, die sie zur Verfügung haben -- und nicht die der Sei&shy;ten&shy;be&shy;trei&shy;ber für wichtig hielt.</p>
<p>navigator.share({
    title: document.title,
    text: "Hello World",
    url: window.location.href
})</p>
<p>Alle Parameter müssen Strings sein. Ob diese aus JavaScript kommen oder hardcoded sind, ist egal. Test oder URL können weg&shy;ge&shy;lass&shy;sen werden.</p>
<p>Zu&shy;rück&shy;ge&shy;ge&shy;ben wird eine Promise. Man kann den User also fürs Sharen belohnen oder Ab&shy;bruch&shy;ra&shy;ten tracken.</p>
<p>Ein paar Ein&shy;schrän&shy;kun&shy;gen hat die Technik: Sie ist nur auf HTTPS-Seiten verfügbar, und kann nur durch User-In&shy;ter&shy;ak&shy;ti&shy;on getriggert werden (nicht etwa onLoad oder onScroll -- Sorry lieber "User Engager"). Navigator.share() ist derzeit nur im Chrome (ab Version 55) verfügbar. Wie bei allen aktuellen Features wird der Entwickler also pro&shy;gres&shy;si&shy;ve&shy;ly enhancen (<code>navigator.share !== undefined</code>).</p>
<p>Mozilla verfolgte ienn ähnlichen Ansatz:</p>
<p>https://github.com/mozilla/f1/wiki/navigator-share-api</p>
<p>navigator.coo&shy;kie&shy;Enab&shy;led
navigator.doNotTrack
navigator.getBattery().then(function(e){console.log(e)})
navigator.hard&shy;ware&shy;Con&shy;cur&shy;ren&shy;cy
navigator.geo&shy;lo&shy;ca&shy;ti&shy;on
navigator.onLine
navigator.storage</p>
<h3>navigator.vibrate(500)</h3>
<p>Lässt das Gerät vibrieren, wenn das verfügbar ist. Als Parameter nimmt die Funktion einen Integer (einmalige Vibration für x Mil&shy;li&shy;se&shy;kun&shy;den) oder ein Array (Pattern von Vibration und Pause) entgegen. <code>navigator.vibrate([100,200,300])</code> vibriert also 100 ms, pausiert 200 ms, vibriert 300 ms. Verfügbar in modernen mobilen Browsern (<a href="http://caniuse.com/#search=vibration">caniuse?</a>). Die Funktion steht aber auch in nicht-vi&shy;brier&shy;fä&shy;hi&shy;gen Geräten zur Verfügung und lässt sich nicht prüfen. Zur Erkennung muss man also über die Device-Detection gehen.</p>
<p>navigator.watch()
navigator.per&shy;mis&shy;si&shy;ons
navigator.sendBeacon()</p>
<p>navigator.battery
navigator.connection</p>
<p>Navigator.standalone</p>
<p>Net&shy;wor&shy;kIn&shy;for&shy;ma&shy;ti&shy;on.type
- https://developer.mozilla.org/en-US/docs/Web/API/Net&shy;wor&shy;kIn&shy;for&shy;ma&shy;ti&shy;on</p>
<h2>(2) Media Queries</h2>
<h3>(device-)aspect-ratio</h3>
<p>...</p>
<p>Wenig beachtet ist der Un&shy;ter&shy;schied zwischen device-aspect-ratio und aspect-ratio. Letztere beschreibt die Ratio des Fensters -- nicht des Gerätes. Besonders auf großen Bild&shy;schir&shy;men, wo man im Split Screen arbeitet (was mitt&shy;ler&shy;wei&shy;le auch auf Tablets kein Problem mehr ist), kann das Fenster komplett anders als das Gerät sein. Lässt sich mit min/max kom&shy;bi&shy;nie&shy;ren:</p>
<p>@media screen and (device-aspect-ratio: 16/9), screen and (device-aspect-ratio: 16/10) { ... }</p>
<h3>ori&shy;en&shy;ta&shy;ti&shy;on</h3>
<p>Eine simplere Variante der ratio. Nimmt die Werte <code>landscape</code> oder <code>portrait</code> an.</p>
<p>@media all and (ori&shy;en&shy;ta&shy;ti&shy;on: portrait) { ... }</p>
<h3>resolution</h3>
<p>Erkennt die Pi&shy;xel&shy;dich&shy;te auf einem Gerät, und wird vor Allem genutzt, um Retina-optimierte Bilder aus&shy;zu&shy;lie&shy;fern (<code>min-resolution: 300dpi</code>).</p>
<h3>supports</h3>
<p>Erst heute in einem <a href="https://github.com/codecandies/grid-talk">Vortrag des Kollegen Brünjes</a> gesehen. Außerhalb leider selten. Mit dieser Feature Query prüft man, ob der Browser bestimmte CSS-Ei&shy;gen&shy;schaf&shy;ten un&shy;ter&shy;stützt. Zum Beispiel <code>@supports(blink)</code> oder <code>@supports (display: grid)</code>.</p>
<p>In den meisten Fällen lässt sich die Abfrage bzw. das pro&shy;gres&shy;si&shy;ve En&shy;han&shy;ce&shy;ment direkt in die CSS-Regeln einbauen. Zum Beispiel bei Schrift&shy;grö&shy;ßen via <code>font-size:16px; font-size: 1rem;</code> für den IE8. Der ignoriert die zweite Angabe, mit der er nicht klarkommt, und nutzt die erste. Moderne Browser über&shy;schrei&shy;ben die erste mit der zweiten.</p>
<p>Die Query <code>@supports</code> sorgt aber für Klarheit, wenn man größere Blöcke umstylen will, sobald eine Technik verfügbar ist. Oder aber, um eine ganz andere CSS-Datei zu laden.</p>
<pre>&lt;link rel="stylesheet" media="all" href="basic.css" /&gt;
&lt;link rel="stylesheet" media="screen and (min-width: 5in) and (display: flex)" href="shiny.css" /&gt;</pre>

<p>Der IE bis inklusive Version 11 un&shy;ter&shy;stützt <code>@supports</code> nicht.</p>
<p>Der Support von Features lässt sich auch via JavaScript über die CSS-API des Browsers abfragen: <code>var canuiseCSSGrid = CSS.supports("(display: grid)");</code>.</p>
<h3>Exotische und</h3>
<p>Der Voll&shy;stän&shy;dig&shy;keit halber noch ein paar Media Features, die eher selten genutzt werden.</p>
<p><code>scan</code> un&shy;ter&shy;schei&shy;det in der Art des Bild&shy;auf&shy;baus am Bildschirm (interlace vs pro&shy;gres&shy;si&shy;ve), und ist relevant bei schnellen Bewegungen.</p>
<p><code>color</code> und <code>color-index</code> geben an, wie viele Farben verfügbar sind und wie sie ge&shy;spei&shy;chert werden, <code>monochrome</code> erkennt Geräte die nur mit Graustufen arbeiten (und mit wie vielen). <code>grid</code> spricht auf Monospace-Font Displays an, also alle die feste Plätze und Breiten für jedes Zeichen haben. Theo&shy;re&shy;tisch ist das cool, um reduzierte Bilder (oder auf Kontrast op&shy;ti&shy;mier&shy;tes CSS) an Geräte wie den Kindle aus&shy;zu&shy;lie&shy;fern. Weil diese Mi&shy;kro&shy;op&shy;ti&shy;mie&shy;rung aber kaum jemand betreibt, machen die Geräte selbst was gutes aus dem CSS -- weshalb wiederum niemand diese Mi&shy;kro&shy;op&shy;ti&shy;mie&shy;rung betreibt.</p>
<p>Im Firefox kann man Windows-Versionen und Be&shy;triebs&shy;sys&shy;tem-Stile erkennen und mit seienm Styling darauf reagieren. Feature-Queries wie <code></code>-moz-os-version:windows-win10<code>,</code>-moz-mac-graphite-theme<code>und</code>-moz-windows-theme:aero` regeln das.</p>
<h3>Media Queries Level 4</h3>
<p>Noch im <a href="https://drafts.csswg.org/mediaqueries-4/#media">Draft-Status</a> sind Media Queries Level 4. Sie ver&shy;spre&shy;chen Features wie <code>update</code> (Schnel&shy;lig&shy;keit beim Bildaufbau, quasi frames-per-second), und eine bessere Logische Ver&shy;knüp&shy;fung von Queries via <code>not</code> und <code>or</code>.</p>
<h2>(3) The Missing</h2>
<p>Was um Himmels Willen endlich eingeführt werden muss:</p>
<ul>
<li>Bandbreite/Netz&shy;werk&shy;ge&shy;schwin&shy;dig&shy;keit</li>
<li>Wifi/Cellular (oder eigentlich: Flatrate vs jedes-MB-zählt)</li>
<li>Container Queries</li>
<li>Geräte-Ge&shy;schwin&shy;dig&shy;keit oder RAM. Ich möchte wissen, ob das Gerät schwach ist. Die CPU-Zahl via <code>navigator.hardwareConcurrency</code> hilft schon.</li>
<li>Queries an Script-Tags:</li>
</ul>
<pre>&lt;script media="screen and not (doNotTrack)" src="https://google.com/analytics.js" defer integrity="abc"&gt;
&lt;script media="screen and (bandwidth:high)" src="/immersiveEffects.js" defer integrity="xyz"&gt;
</script></pre>

</article>
</body>
</html>